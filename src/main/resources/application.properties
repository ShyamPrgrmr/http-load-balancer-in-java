spring.application.name=load_balancer

load.balancer.queue.size=10
load.balancer.port=9090

load.balancer.request.payload.size=512


#mention context in between two "/" ex. /lb/ , /loabdbalncer/, /middleware/ 
load.balancer.context.path=/lb/
load.balancer.acceptor.threads.count=2

load.balancer.worker.threads.count=5
#wait time in milisecond if queue is empty
load.balancer.worker.thread.leader.wait.time=5 
load.balancer.worker.thread.count=5



#Default = ROUNDS_ROBIN
#Possible Values = ROUNDS_ROBIN, IP_HASH, REQUESTID_HASH, WEIGHTED_ROUNDS_ROBIN, IP_HASHING_AUTOSCALLING
load.balancer.algorithm=IP_HASHING_AUTOSCALLING

#Comma separated upstream servers 
#Do Not add '/' at the end
load.balancer.upstream.server.list=http://127.0.0.1:3000,http://127.0.0.1:9000

#Optional
load.balancer.upstream.backup.server.list=http://127.0.0.1:3000
load.balancer.upstream.timeout=10000
#Add the percentage(0-100%) 
#It should be in same order of that you define the upstream
#less number of values will cause a issue
#Addition of values should be 100%
load.balancer.algorithm.weightedroundrobin.percentage=50%,50%

#hashring length
load.balancer.algorithm.hashring.length=10
#if the upstream returned by hash is not up, should the traffic proxy passed to other available upstream
load.balancer.algorithm.hashring.failover.if.upstream.failing=true

#Health check configuration
#interval in mili second
load.balancer.healthcheck.scheduler.interval=3000
load.balancer.healthcheck.endpoint=/healthcheck
#if upstream is not responding then how many miliseconds it should try
load.balancer.healthcheck.endpoint.timeout=5000
load.balancer.healthcheck.initial.delay=10


